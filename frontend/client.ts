// Code generated by the Encore 1.49.3 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly molecular: molecular.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.molecular = new molecular.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createAdvancedAnalysis as api_molecular_advanced_analysis_createAdvancedAnalysis,
    getAdvancedAnalysis as api_molecular_advanced_analysis_getAdvancedAnalysis
} from "~backend/molecular/advanced_analysis";
import {
    getBatchRiskAssessment as api_molecular_advanced_risk_quantification_getBatchRiskAssessment,
    getRiskFactorCalibration as api_molecular_advanced_risk_quantification_getRiskFactorCalibration,
    performAdvancedRiskAssessment as api_molecular_advanced_risk_quantification_performAdvancedRiskAssessment
} from "~backend/molecular/advanced_risk_quantification";
import {
    createAnalysis as api_molecular_analysis_createAnalysis,
    getAnalysis as api_molecular_analysis_getAnalysis
} from "~backend/molecular/analysis";
import { createMolecule as api_molecular_create_molecule_createMolecule } from "~backend/molecular/create_molecule";
import {
    getDatabaseStatus as api_molecular_database_integration_getDatabaseStatus,
    getSupportedDatabases as api_molecular_database_integration_getSupportedDatabases,
    listDatabases as api_molecular_database_integration_listDatabases,
    queryDatabases as api_molecular_database_integration_queryDatabases,
    searchDatabaseAnnotations as api_molecular_database_integration_searchDatabaseAnnotations,
    searchMultipleDatabases as api_molecular_database_integration_searchMultipleDatabases
} from "~backend/molecular/database_integration";
import {
    getCommunicationHistory as api_molecular_expert_review_workflow_getCommunicationHistory,
    getExpertPool as api_molecular_expert_review_workflow_getExpertPool,
    getReviewMetrics as api_molecular_expert_review_workflow_getReviewMetrics,
    getReviewQueue as api_molecular_expert_review_workflow_getReviewQueue,
    scheduleConsensusSession as api_molecular_expert_review_workflow_scheduleConsensusSession,
    submitExpertReview as api_molecular_expert_review_workflow_submitExpertReview,
    submitReviewRequest as api_molecular_expert_review_workflow_submitReviewRequest
} from "~backend/molecular/expert_review_workflow";
import {
    getFileAnalysis as api_molecular_file_analysis_getFileAnalysis,
    listFileAnalyses as api_molecular_file_analysis_listFileAnalyses,
    uploadAndAnalyzeFile as api_molecular_file_analysis_uploadAndAnalyzeFile
} from "~backend/molecular/file_analysis";
import { getMolecule as api_molecular_get_molecule_getMolecule } from "~backend/molecular/get_molecule";
import { listMolecules as api_molecular_list_molecules_listMolecules } from "~backend/molecular/list_molecules";
import {
    getPerformanceHistory as api_molecular_performance_monitoring_getPerformanceHistory,
    getSystemAlerts as api_molecular_performance_monitoring_getSystemAlerts,
    getSystemHealth as api_molecular_performance_monitoring_getSystemHealth,
    runModelBenchmark as api_molecular_performance_monitoring_runModelBenchmark
} from "~backend/molecular/performance_monitoring";
import {
    createRiskAssessment as api_molecular_risk_assessment_createRiskAssessment,
    getRiskAssessment as api_molecular_risk_assessment_getRiskAssessment
} from "~backend/molecular/risk_assessment";
import {
    designRNAi as api_molecular_rnai_design_algorithms_designRNAi,
    getDesign as api_molecular_rnai_design_algorithms_getDesign,
    listDesigns as api_molecular_rnai_design_algorithms_listDesigns,
    validateDesign as api_molecular_rnai_design_algorithms_validateDesign
} from "~backend/molecular/rnai_design_algorithms";
import {
    analyzeOffTargets as api_molecular_rnai_off_target_analysis_analyzeOffTargets,
    analyzeThermodynamics as api_molecular_rnai_off_target_analysis_analyzeThermodynamics,
    listOffTargets as api_molecular_rnai_off_target_analysis_listOffTargets,
    updateOffTargetPrediction as api_molecular_rnai_off_target_analysis_updateOffTargetPrediction
} from "~backend/molecular/rnai_off_target_analysis";
import {
    createTarget as api_molecular_rnai_target_analysis_createTarget,
    deleteTarget as api_molecular_rnai_target_analysis_deleteTarget,
    getTarget as api_molecular_rnai_target_analysis_getTarget,
    listTargets as api_molecular_rnai_target_analysis_listTargets,
    updateTarget as api_molecular_rnai_target_analysis_updateTarget,
    validateTarget as api_molecular_rnai_target_analysis_validateTarget
} from "~backend/molecular/rnai_target_analysis";
import {
    createExperiment as api_molecular_rnai_testing_framework_createExperiment,
    createValidation as api_molecular_rnai_testing_framework_createValidation,
    getExperiment as api_molecular_rnai_testing_framework_getExperiment,
    listExperiments as api_molecular_rnai_testing_framework_listExperiments,
    predictEfficiency as api_molecular_rnai_testing_framework_predictEfficiency,
    runBenchmarkTest as api_molecular_rnai_testing_framework_runBenchmarkTest
} from "~backend/molecular/rnai_testing_framework";
import {
    createSnapshot as api_molecular_snapshots_createSnapshot,
    deleteSnapshot as api_molecular_snapshots_deleteSnapshot,
    getSnapshotImage as api_molecular_snapshots_getSnapshotImage,
    getSnapshots as api_molecular_snapshots_getSnapshots
} from "~backend/molecular/snapshots";

export namespace molecular {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.analyzeOffTargets = this.analyzeOffTargets.bind(this)
            this.analyzeThermodynamics = this.analyzeThermodynamics.bind(this)
            this.createAdvancedAnalysis = this.createAdvancedAnalysis.bind(this)
            this.createAnalysis = this.createAnalysis.bind(this)
            this.createExperiment = this.createExperiment.bind(this)
            this.createMolecule = this.createMolecule.bind(this)
            this.createRiskAssessment = this.createRiskAssessment.bind(this)
            this.createSnapshot = this.createSnapshot.bind(this)
            this.createTarget = this.createTarget.bind(this)
            this.createValidation = this.createValidation.bind(this)
            this.deleteSnapshot = this.deleteSnapshot.bind(this)
            this.deleteTarget = this.deleteTarget.bind(this)
            this.designRNAi = this.designRNAi.bind(this)
            this.getAdvancedAnalysis = this.getAdvancedAnalysis.bind(this)
            this.getAnalysis = this.getAnalysis.bind(this)
            this.getBatchRiskAssessment = this.getBatchRiskAssessment.bind(this)
            this.getCommunicationHistory = this.getCommunicationHistory.bind(this)
            this.getDatabaseStatus = this.getDatabaseStatus.bind(this)
            this.getDesign = this.getDesign.bind(this)
            this.getExperiment = this.getExperiment.bind(this)
            this.getExpertPool = this.getExpertPool.bind(this)
            this.getFileAnalysis = this.getFileAnalysis.bind(this)
            this.getMolecule = this.getMolecule.bind(this)
            this.getPerformanceHistory = this.getPerformanceHistory.bind(this)
            this.getReviewMetrics = this.getReviewMetrics.bind(this)
            this.getReviewQueue = this.getReviewQueue.bind(this)
            this.getRiskAssessment = this.getRiskAssessment.bind(this)
            this.getRiskFactorCalibration = this.getRiskFactorCalibration.bind(this)
            this.getSnapshotImage = this.getSnapshotImage.bind(this)
            this.getSnapshots = this.getSnapshots.bind(this)
            this.getSupportedDatabases = this.getSupportedDatabases.bind(this)
            this.getSystemAlerts = this.getSystemAlerts.bind(this)
            this.getSystemHealth = this.getSystemHealth.bind(this)
            this.getTarget = this.getTarget.bind(this)
            this.listDatabases = this.listDatabases.bind(this)
            this.listDesigns = this.listDesigns.bind(this)
            this.listExperiments = this.listExperiments.bind(this)
            this.listFileAnalyses = this.listFileAnalyses.bind(this)
            this.listMolecules = this.listMolecules.bind(this)
            this.listOffTargets = this.listOffTargets.bind(this)
            this.listTargets = this.listTargets.bind(this)
            this.performAdvancedRiskAssessment = this.performAdvancedRiskAssessment.bind(this)
            this.predictEfficiency = this.predictEfficiency.bind(this)
            this.queryDatabases = this.queryDatabases.bind(this)
            this.runBenchmarkTest = this.runBenchmarkTest.bind(this)
            this.runModelBenchmark = this.runModelBenchmark.bind(this)
            this.scheduleConsensusSession = this.scheduleConsensusSession.bind(this)
            this.searchDatabaseAnnotations = this.searchDatabaseAnnotations.bind(this)
            this.searchMultipleDatabases = this.searchMultipleDatabases.bind(this)
            this.submitExpertReview = this.submitExpertReview.bind(this)
            this.submitReviewRequest = this.submitReviewRequest.bind(this)
            this.updateOffTargetPrediction = this.updateOffTargetPrediction.bind(this)
            this.updateTarget = this.updateTarget.bind(this)
            this.uploadAndAnalyzeFile = this.uploadAndAnalyzeFile.bind(this)
            this.validateDesign = this.validateDesign.bind(this)
            this.validateTarget = this.validateTarget.bind(this)
        }

        /**
         * Performs comprehensive off-target analysis for an RNAi design
         */
        public async analyzeOffTargets(params: RequestType<typeof api_molecular_rnai_off_target_analysis_analyzeOffTargets>): Promise<ResponseType<typeof api_molecular_rnai_off_target_analysis_analyzeOffTargets>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "analysis_parameters": params["analysis_parameters"],
                "genome_database":     params["genome_database"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/designs/${encodeURIComponent(params.design_id)}/off-targets`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_off_target_analysis_analyzeOffTargets>
        }

        /**
         * Performs detailed thermodynamic analysis
         */
        public async analyzeThermodynamics(params: RequestType<typeof api_molecular_rnai_off_target_analysis_analyzeThermodynamics>): Promise<ResponseType<typeof api_molecular_rnai_off_target_analysis_analyzeThermodynamics>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "analysis_conditions": params["analysis_conditions"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/designs/${encodeURIComponent(params.design_id)}/thermodynamics`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_off_target_analysis_analyzeThermodynamics>
        }

        /**
         * Creates advanced molecular analysis with enhanced visualization capabilities.
         */
        public async createAdvancedAnalysis(params: RequestType<typeof api_molecular_advanced_analysis_createAdvancedAnalysis>): Promise<ResponseType<typeof api_molecular_advanced_analysis_createAdvancedAnalysis>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "analysis_type": params["analysis_type"],
                parameters:      params.parameters,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/molecules/${encodeURIComponent(params.molecule_id)}/advanced-analysis`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_advanced_analysis_createAdvancedAnalysis>
        }

        /**
         * Creates a new analysis for a molecule.
         */
        public async createAnalysis(params: RequestType<typeof api_molecular_analysis_createAnalysis>): Promise<ResponseType<typeof api_molecular_analysis_createAnalysis>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "analysis_type": params["analysis_type"],
                parameters:      params.parameters,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/molecules/${encodeURIComponent(params.molecule_id)}/analysis`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_analysis_createAnalysis>
        }

        /**
         * Creates a new RNAi experiment
         */
        public async createExperiment(params: RequestType<typeof api_molecular_rnai_testing_framework_createExperiment>): Promise<ResponseType<typeof api_molecular_rnai_testing_framework_createExperiment>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "experiment_name":         params["experiment_name"],
                "experiment_type":         params["experiment_type"],
                "experimental_parameters": params["experimental_parameters"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/designs/${encodeURIComponent(params.design_id)}/experiments`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_testing_framework_createExperiment>
        }

        /**
         * Creates a new molecule entry.
         */
        public async createMolecule(params: RequestType<typeof api_molecular_create_molecule_createMolecule>): Promise<ResponseType<typeof api_molecular_create_molecule_createMolecule>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/molecules`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_create_molecule_createMolecule>
        }

        /**
         * Creates a comprehensive risk assessment for a molecule.
         */
        public async createRiskAssessment(params: RequestType<typeof api_molecular_risk_assessment_createRiskAssessment>): Promise<ResponseType<typeof api_molecular_risk_assessment_createRiskAssessment>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "risk_scores": params["risk_scores"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/molecules/${encodeURIComponent(params.molecule_id)}/risk-assessment`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_risk_assessment_createRiskAssessment>
        }

        /**
         * Creates a snapshot of the current visualization state.
         */
        public async createSnapshot(params: RequestType<typeof api_molecular_snapshots_createSnapshot>): Promise<ResponseType<typeof api_molecular_snapshots_createSnapshot>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "camera_position":        params["camera_position"],
                description:              params.description,
                "image_data":             params["image_data"],
                name:                     params.name,
                "visualization_settings": params["visualization_settings"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/molecules/${encodeURIComponent(params.molecule_id)}/snapshots`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_snapshots_createSnapshot>
        }

        /**
         * Creates a new RNAi target with validation
         */
        public async createTarget(params: RequestType<typeof api_molecular_rnai_target_analysis_createTarget>): Promise<ResponseType<typeof api_molecular_rnai_target_analysis_createTarget>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/targets`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_target_analysis_createTarget>
        }

        /**
         * Creates validation test for an RNAi design
         */
        public async createValidation(params: RequestType<typeof api_molecular_rnai_testing_framework_createValidation>): Promise<ResponseType<typeof api_molecular_rnai_testing_framework_createValidation>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "validation_method":     params["validation_method"],
                "validation_parameters": params["validation_parameters"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/designs/${encodeURIComponent(params.design_id)}/validations`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_testing_framework_createValidation>
        }

        /**
         * Deletes a snapshot and its associated image.
         */
        public async deleteSnapshot(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/snapshots/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Deletes a target
         */
        public async deleteTarget(params: { id: number }): Promise<ResponseType<typeof api_molecular_rnai_target_analysis_deleteTarget>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/targets/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_target_analysis_deleteTarget>
        }

        /**
         * Designs RNAi constructs for a given target
         */
        public async designRNAi(params: RequestType<typeof api_molecular_rnai_design_algorithms_designRNAi>): Promise<ResponseType<typeof api_molecular_rnai_design_algorithms_designRNAi>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "design_parameters": params["design_parameters"],
                "design_type":       params["design_type"],
                "max_designs":       params["max_designs"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/targets/${encodeURIComponent(params.target_id)}/design`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_design_algorithms_designRNAi>
        }

        /**
         * Retrieves advanced analysis results with enhanced metadata.
         */
        public async getAdvancedAnalysis(params: RequestType<typeof api_molecular_advanced_analysis_getAdvancedAnalysis>): Promise<ResponseType<typeof api_molecular_advanced_analysis_getAdvancedAnalysis>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "analysis_type": params["analysis_type"],
                format:          params.format,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/molecules/${encodeURIComponent(params.molecule_id)}/advanced-analysis`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_advanced_analysis_getAdvancedAnalysis>
        }

        /**
         * Retrieves analysis results for a molecule.
         */
        public async getAnalysis(params: RequestType<typeof api_molecular_analysis_getAnalysis>): Promise<ResponseType<typeof api_molecular_analysis_getAnalysis>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "analysis_type": params["analysis_type"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/molecules/${encodeURIComponent(params.molecule_id)}/analysis`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_analysis_getAnalysis>
        }

        public async getBatchRiskAssessment(params: RequestType<typeof api_molecular_advanced_risk_quantification_getBatchRiskAssessment>): Promise<ResponseType<typeof api_molecular_advanced_risk_quantification_getBatchRiskAssessment>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/risk/batch-assessment`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_advanced_risk_quantification_getBatchRiskAssessment>
        }

        public async getCommunicationHistory(params: { requestId: string }): Promise<ResponseType<typeof api_molecular_expert_review_workflow_getCommunicationHistory>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/expert-review/communications/${encodeURIComponent(params.requestId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_expert_review_workflow_getCommunicationHistory>
        }

        public async getDatabaseStatus(): Promise<ResponseType<typeof api_molecular_database_integration_getDatabaseStatus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/databases/status`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_database_integration_getDatabaseStatus>
        }

        /**
         * Gets a specific design with detailed analysis
         */
        public async getDesign(params: { id: number }): Promise<ResponseType<typeof api_molecular_rnai_design_algorithms_getDesign>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/designs/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_design_algorithms_getDesign>
        }

        /**
         * Gets detailed experiment results
         */
        public async getExperiment(params: { experiment_id: number }): Promise<ResponseType<typeof api_molecular_rnai_testing_framework_getExperiment>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/experiments/${encodeURIComponent(params.experiment_id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_testing_framework_getExperiment>
        }

        public async getExpertPool(): Promise<ResponseType<typeof api_molecular_expert_review_workflow_getExpertPool>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/expert-review/experts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_expert_review_workflow_getExpertPool>
        }

        /**
         * Get analysis result by ID
         */
        public async getFileAnalysis(params: { analysisId: string }): Promise<ResponseType<typeof api_molecular_file_analysis_getFileAnalysis>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/file-analysis/${encodeURIComponent(params.analysisId)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_file_analysis_getFileAnalysis>
        }

        /**
         * Retrieves a molecule by ID.
         */
        public async getMolecule(params: { id: number }): Promise<ResponseType<typeof api_molecular_get_molecule_getMolecule>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/molecules/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_get_molecule_getMolecule>
        }

        /**
         * Retrieves historical performance data for specific metrics.
         */
        public async getPerformanceHistory(params: RequestType<typeof api_molecular_performance_monitoring_getPerformanceHistory>): Promise<ResponseType<typeof api_molecular_performance_monitoring_getPerformanceHistory>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                granularity:   params.granularity,
                "metric_type": params["metric_type"],
                "time_range":  params["time_range"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/performance/history`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_performance_monitoring_getPerformanceHistory>
        }

        public async getReviewMetrics(): Promise<ResponseType<typeof api_molecular_expert_review_workflow_getReviewMetrics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/expert-review/metrics`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_expert_review_workflow_getReviewMetrics>
        }

        public async getReviewQueue(): Promise<ResponseType<typeof api_molecular_expert_review_workflow_getReviewQueue>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/expert-review/queue`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_expert_review_workflow_getReviewQueue>
        }

        /**
         * Retrieves the latest risk assessment for a molecule.
         */
        public async getRiskAssessment(params: { molecule_id: number }): Promise<ResponseType<typeof api_molecular_risk_assessment_getRiskAssessment>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/molecules/${encodeURIComponent(params.molecule_id)}/risk-assessment`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_risk_assessment_getRiskAssessment>
        }

        public async getRiskFactorCalibration(): Promise<ResponseType<typeof api_molecular_advanced_risk_quantification_getRiskFactorCalibration>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/risk/calibration`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_advanced_risk_quantification_getRiskFactorCalibration>
        }

        /**
         * Generates a signed URL for downloading a snapshot image.
         */
        public async getSnapshotImage(params: { id: number }): Promise<ResponseType<typeof api_molecular_snapshots_getSnapshotImage>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/snapshots/${encodeURIComponent(params.id)}/image`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_snapshots_getSnapshotImage>
        }

        /**
         * Retrieves all snapshots for a molecule.
         */
        public async getSnapshots(params: { molecule_id: number }): Promise<ResponseType<typeof api_molecular_snapshots_getSnapshots>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/molecules/${encodeURIComponent(params.molecule_id)}/snapshots`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_snapshots_getSnapshots>
        }

        public async getSupportedDatabases(): Promise<ResponseType<typeof api_molecular_database_integration_getSupportedDatabases>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/databases/supported`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_database_integration_getSupportedDatabases>
        }

        /**
         * Retrieves active system alerts and monitoring notifications.
         */
        public async getSystemAlerts(): Promise<ResponseType<typeof api_molecular_performance_monitoring_getSystemAlerts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/alerts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_performance_monitoring_getSystemAlerts>
        }

        /**
         * Retrieves comprehensive system health and performance metrics.
         */
        public async getSystemHealth(params: RequestType<typeof api_molecular_performance_monitoring_getSystemHealth>): Promise<ResponseType<typeof api_molecular_performance_monitoring_getSystemHealth>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "include_detailed": params["include_detailed"] === undefined ? undefined : String(params["include_detailed"]),
                "time_range":       params["time_range"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/health`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_performance_monitoring_getSystemHealth>
        }

        /**
         * Gets a specific target by ID
         */
        public async getTarget(params: { id: number }): Promise<ResponseType<typeof api_molecular_rnai_target_analysis_getTarget>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/targets/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_target_analysis_getTarget>
        }

        public async listDatabases(): Promise<ResponseType<typeof api_molecular_database_integration_listDatabases>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/databases`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_database_integration_listDatabases>
        }

        /**
         * Lists designs for a target
         */
        public async listDesigns(params: RequestType<typeof api_molecular_rnai_design_algorithms_listDesigns>): Promise<ResponseType<typeof api_molecular_rnai_design_algorithms_listDesigns>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "design_type": params["design_type"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/targets/${encodeURIComponent(params.target_id)}/designs`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_design_algorithms_listDesigns>
        }

        /**
         * Lists experiments for a design
         */
        public async listExperiments(params: RequestType<typeof api_molecular_rnai_testing_framework_listExperiments>): Promise<ResponseType<typeof api_molecular_rnai_testing_framework_listExperiments>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "experiment_type": params["experiment_type"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/designs/${encodeURIComponent(params.design_id)}/experiments`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_testing_framework_listExperiments>
        }

        /**
         * List recent file analyses
         */
        public async listFileAnalyses(params: RequestType<typeof api_molecular_file_analysis_listFileAnalyses>): Promise<ResponseType<typeof api_molecular_file_analysis_listFileAnalyses>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: params.limit === undefined ? undefined : String(params.limit),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/file-analysis`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_file_analysis_listFileAnalyses>
        }

        /**
         * Retrieves all molecules with optional filtering and pagination.
         */
        public async listMolecules(params: RequestType<typeof api_molecular_list_molecules_listMolecules>): Promise<ResponseType<typeof api_molecular_list_molecules_listMolecules>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
                search: params.search,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/molecules`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_list_molecules_listMolecules>
        }

        /**
         * Lists off-target predictions for a design
         */
        public async listOffTargets(params: RequestType<typeof api_molecular_rnai_off_target_analysis_listOffTargets>): Promise<ResponseType<typeof api_molecular_rnai_off_target_analysis_listOffTargets>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "min_risk_score": params["min_risk_score"] === undefined ? undefined : String(params["min_risk_score"]),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/designs/${encodeURIComponent(params.design_id)}/off-targets`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_off_target_analysis_listOffTargets>
        }

        /**
         * Lists RNAi targets with filtering
         */
        public async listTargets(params: RequestType<typeof api_molecular_rnai_target_analysis_listTargets>): Promise<ResponseType<typeof api_molecular_rnai_target_analysis_listTargets>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "gene_symbol": params["gene_symbol"],
                limit:         params.limit === undefined ? undefined : String(params.limit),
                offset:        params.offset === undefined ? undefined : String(params.offset),
                organism:      params.organism,
                "target_type": params["target_type"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/targets`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_target_analysis_listTargets>
        }

        public async performAdvancedRiskAssessment(params: RequestType<typeof api_molecular_advanced_risk_quantification_performAdvancedRiskAssessment>): Promise<ResponseType<typeof api_molecular_advanced_risk_quantification_performAdvancedRiskAssessment>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/risk/advanced-assessment`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_advanced_risk_quantification_performAdvancedRiskAssessment>
        }

        /**
         * Predicts RNAi efficiency using machine learning models
         */
        public async predictEfficiency(params: RequestType<typeof api_molecular_rnai_testing_framework_predictEfficiency>): Promise<ResponseType<typeof api_molecular_rnai_testing_framework_predictEfficiency>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "prediction_parameters": params["prediction_parameters"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/designs/${encodeURIComponent(params.design_id)}/predict-efficiency`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_testing_framework_predictEfficiency>
        }

        public async queryDatabases(params: RequestType<typeof api_molecular_database_integration_queryDatabases>): Promise<ResponseType<typeof api_molecular_database_integration_queryDatabases>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/databases/query`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_database_integration_queryDatabases>
        }

        /**
         * Runs benchmark tests comparing multiple designs
         */
        public async runBenchmarkTest(params: RequestType<typeof api_molecular_rnai_testing_framework_runBenchmarkTest>): Promise<ResponseType<typeof api_molecular_rnai_testing_framework_runBenchmarkTest>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/benchmark`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_testing_framework_runBenchmarkTest>
        }

        /**
         * Runs comprehensive model benchmarking and performance evaluation.
         */
        public async runModelBenchmark(params: RequestType<typeof api_molecular_performance_monitoring_runModelBenchmark>): Promise<ResponseType<typeof api_molecular_performance_monitoring_runModelBenchmark>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/models/benchmark`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_performance_monitoring_runModelBenchmark>
        }

        public async scheduleConsensusSession(params: RequestType<typeof api_molecular_expert_review_workflow_scheduleConsensusSession>): Promise<ResponseType<typeof api_molecular_expert_review_workflow_scheduleConsensusSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/expert-review/consensus`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_expert_review_workflow_scheduleConsensusSession>
        }

        public async searchDatabaseAnnotations(params: RequestType<typeof api_molecular_database_integration_searchDatabaseAnnotations>): Promise<ResponseType<typeof api_molecular_database_integration_searchDatabaseAnnotations>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/databases/annotations/search`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_database_integration_searchDatabaseAnnotations>
        }

        public async searchMultipleDatabases(params: RequestType<typeof api_molecular_database_integration_searchMultipleDatabases>): Promise<ResponseType<typeof api_molecular_database_integration_searchMultipleDatabases>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/databases/search`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_database_integration_searchMultipleDatabases>
        }

        public async submitExpertReview(params: RequestType<typeof api_molecular_expert_review_workflow_submitExpertReview>): Promise<ResponseType<typeof api_molecular_expert_review_workflow_submitExpertReview>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/expert-review/submit-review`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_expert_review_workflow_submitExpertReview>
        }

        public async submitReviewRequest(params: RequestType<typeof api_molecular_expert_review_workflow_submitReviewRequest>): Promise<ResponseType<typeof api_molecular_expert_review_workflow_submitReviewRequest>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/expert-review/submit`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_expert_review_workflow_submitReviewRequest>
        }

        /**
         * Updates off-target prediction with experimental validation
         */
        public async updateOffTargetPrediction(params: RequestType<typeof api_molecular_rnai_off_target_analysis_updateOffTargetPrediction>): Promise<ResponseType<typeof api_molecular_rnai_off_target_analysis_updateOffTargetPrediction>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "experimental_evidence": params["experimental_evidence"],
                notes:                   params.notes,
                "validated_status":      params["validated_status"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/off-targets/${encodeURIComponent(params.prediction_id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_off_target_analysis_updateOffTargetPrediction>
        }

        /**
         * Updates an existing target
         */
        public async updateTarget(params: RequestType<typeof api_molecular_rnai_target_analysis_updateTarget>): Promise<ResponseType<typeof api_molecular_rnai_target_analysis_updateTarget>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "functional_annotation": params["functional_annotation"],
                "gene_id":               params["gene_id"],
                "gene_symbol":           params["gene_symbol"],
                "genomic_coordinates":   params["genomic_coordinates"],
                organism:                params.organism,
                "target_name":           params["target_name"],
                "target_sequence":       params["target_sequence"],
                "target_type":           params["target_type"],
                "transcript_id":         params["transcript_id"],
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/targets/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_target_analysis_updateTarget>
        }

        /**
         * Upload and analyze a bioinformatics file
         */
        public async uploadAndAnalyzeFile(params: RequestType<typeof api_molecular_file_analysis_uploadAndAnalyzeFile>): Promise<ResponseType<typeof api_molecular_file_analysis_uploadAndAnalyzeFile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/file-analysis/upload`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_file_analysis_uploadAndAnalyzeFile>
        }

        /**
         * Validates a custom RNAi design
         */
        public async validateDesign(params: RequestType<typeof api_molecular_rnai_design_algorithms_validateDesign>): Promise<ResponseType<typeof api_molecular_rnai_design_algorithms_validateDesign>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/designs/validate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_design_algorithms_validateDesign>
        }

        /**
         * Validates a target sequence for RNAi design
         */
        public async validateTarget(params: RequestType<typeof api_molecular_rnai_target_analysis_validateTarget>): Promise<ResponseType<typeof api_molecular_rnai_target_analysis_validateTarget>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/rnai/targets/validate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_molecular_rnai_target_analysis_validateTarget>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.49.3)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
